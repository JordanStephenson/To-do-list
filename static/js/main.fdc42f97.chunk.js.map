{"version":3,"sources":["components/layout/Header.js","components/Todoitem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","Todoitem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","value","display","name","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","console","log","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fdc42f97.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n};\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Todoitem extends Component {\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ?\n            'line-through' : 'none'\n        }\n    }\n\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n               <p>\n                   <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, this.props.todo.id)} /> {' '}\n                   { title }\n                   <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\n               </p> \n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoitem.propTypes = {\n    todo: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 10px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n};\n\nexport default Todoitem\n","import React, {Component} from 'react';\nimport Todoitem from './Todoitem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n  \n    render() {\n      return this.props.todos.map((todo) => (\n      <Todoitem key={todo.id} todo={todo} markComplete=\n      {this.props.markComplete} delTodo={this.props.delTodo}/>\n      ));\n    }\n  }\n\n// PropTypes\n  Todos.propTypes = {\n      todos: PropTypes.array.isRequired,\n      markComplete: PropTypes.func.isRequired,\n      delTodo: PropTypes.func.isRequired\n  }\n  \n  export default Todos;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: '' }); \n    }\n\n    onChange = (e) => this.setState({ title: e.target.value });\n\n    render() {\n        return (\n                <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n                    <input \n                        type=\"text\" \n                        name=\"title\"\n                        style={{ flex: '10', padding: '5px' }} \n                        placeholder=\"Add Todo ...\"\n                        value={this.state.title}\n                        onChange={this.onChange}\n                    />\n                    <input \n                        type=\"submit\"\n                        value=\"Submit\"\n                        className=\"btn\"\n                        style={{ flex: '1' }}\n                    />\n                </form>\n        )\n    }\n}\n\n// PropTypes\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0. It is part of a React crash course.</p>\n        </React.Fragment>\n    )\n}\n\nexport default About\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route  } from 'react-router-dom';\n\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n//import {v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\n\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({ todos: res.data }))\n  }\n\n  //toggle complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) });\n  }\n\n  // Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })); \n  }\n\n  // Add Todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n      .then(res =>  this.setState({ todos: [...this.state.todos, res.data] }));\n  }\n\n  render() {\n    console.log(this.state.todos)\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}\n                />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}